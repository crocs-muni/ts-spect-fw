########################################################################################
#   Example configuration of ECDSA Sign
#   Test vector generated by tests/model/p256.py
#
#   Expected result:
#     r: 0x916d870b4454abac254246a5ad7666629e1313c200c9965da1b2f915ff33fe0d
#     s: 0xf148b5246addd6052a1e8e780f81404d4380b27fd300ed35ff75728891fa9ff5
########################################################################################

input :
  # Digest of message (SHA256)
  - name : z # string
    value : e532e49b69c45186ad23bfce8c7e7480b3e98f25a8f3ea627e1768b045b4242d
  # Secure Channel Hash (for deterministic nonce derivation) 
  - name : sch # string
    value : 47e85aef45e9caade1a8989aa451ae28ccfa70cfe38701688f78cb9de430255a
  # Secure Channel Nonce (for deterministic nonce derivation)
  - name : scn # string (little-endian encoding)
    value : d5c1975b
  # Private Key d such that d.G = A is public key
  - name : d # integer
    value : 0x3e28025d5597570ab47512982331d4eb0a3e7e2a1cfca60b119dbc917471763c
  # Private Key w (for deterministic nonce derivation)
  - name : w # (string)
    value : 56b74c32f9bd66eb8601bcc400fda5606c995f5914e55ad818c5b6e9ced76fc0
rng :
  # z coordinate randomization of base point
  - name : base_z_rng
    value : 0x0
  # random value for random point generation (point splitting countermeasure)
  - name : point_gen_rng
    value : 0xaaaa
  # group randomization of scalar for the first multiplication
  - name : s_rng_1
    value : 0xbbbb
  # group randomization of scalar for the second multiplication
  - name : s_rng_2
    value : 0xcccc
  # mask for signature part s calculation -> s = (zt + rtd) / (kt)
  - name : t_rng
    value : 0x0